[project]
name = "dragtor"
readme = "README.md"
dynamic = ["dependencies", "version"]

[project.scripts]
dragtor = "dragtor.__main__:main"

[project.entry-points."kedro.hooks"]

# [tool.setuptools.dynamic]
# dependencies = {file = "requirements.txt"}
# version = {attr = "dragtor.__version__"}

# [tool.setuptools.packages.find]
# where = ["src"]
# namespaces = false

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "dragtor"
version = "0.1.0"
description = "An exploration of non-GPU RAG approaches to built an RAG-Doctor"
authors = ["Mischa <mischa@dataworkz.de>"]
packages = [
    { include = "dragtor", from="src" }
]


[tool.poetry.dependencies]
python = "~3.11.0"
llama-cpp-python = "^0.2.87"
chromadb = "^0.5.5"
kedro = "^0.19.7"
kedro-datasets = "^4.1.0"


[tool.poetry.group.dev.dependencies]
ruff = "^0.5.7"
pytest = "^8.3.2"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
kedro-viz = "^9.2.0"

[tool.kedro]
package_name = "dragtor"
project_name = "dragtor"
kedro_init_version = "0.19.7"
tools = ['Linting', 'Testing', 'Custom Logging', 'Documentation', 'Data Structure', 'Kedro Viz']
example_pipeline = "True"
source_dir = "src"

[tool.pytest.ini_options]
addopts = """
--cov-report term-missing \
--cov src/dragtor -ra"""

[tool.coverage.report]
fail_under = 0
show_missing = true
exclude_lines = ["pragma: no cover", "raise NotImplementedError"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff]
line-length = 100
show-fixes = true
select = [
    "F",   # Pyflakes
    "W",   # pycodestyle
    "E",   # pycodestyle
    "I",   # isort
    "UP",  # pyupgrade
    "PL",  # Pylint
    "T201", # Print Statement
]
ignore = ["E501"]  # Ruff format takes care of line-too-long

[tool.kedro_telemetry]
project_id = "926dfeeead574c77b626444b294ff995"
